//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\lopez\Desktop\asdasdasd\Practica6\Practica3\sicxeGram.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Practica3 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class sicxeGramParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, BASE=7, RESW=8, RESB=9, 
		WORD=10, BYTE=11, START=12, END=13, COMMA=14, INSTR1=15, INSTR2_r1r2=16, 
		INSTR2_r1=17, INSTR2_r1n=18, INSTR2_n=19, INSTR3=20, INSTR4=21, FINL=22, 
		REG=23, NUMDEC=24, TEXT=25, NUMHEX_sh=26, NUMHEX=27, CONSTHEX=28, CONSTCAD=29;
	public const int
		RULE_program = 0, RULE_start = 1, RULE_end = 2, RULE_propositions = 3, 
		RULE_proposition = 4, RULE_lineBreak = 5, RULE_directive = 6, RULE_directiveType = 7, 
		RULE_byte = 8, RULE_word = 9, RULE_resb = 10, RULE_resw = 11, RULE_base = 12, 
		RULE_instruction = 13, RULE_format = 14, RULE_f1 = 15, RULE_f2 = 16, RULE_f3 = 17, 
		RULE_f4 = 18, RULE_simple3 = 19, RULE_indirect3 = 20, RULE_immediate3 = 21, 
		RULE_simple4 = 22, RULE_indirect4 = 23, RULE_immediate4 = 24, RULE_num = 25, 
		RULE_label = 26, RULE_const = 27, RULE_reg = 28;
	public static readonly string[] ruleNames = {
		"program", "start", "end", "propositions", "proposition", "lineBreak", 
		"directive", "directiveType", "byte", "word", "resb", "resw", "base", 
		"instruction", "format", "f1", "f2", "f3", "f4", "simple3", "indirect3", 
		"immediate3", "simple4", "indirect4", "immediate4", "num", "label", "const", 
		"reg"
	};

	private static readonly string[] _LiteralNames = {
		null, "',X'", "', X'", "'RSUB'", "'@'", "'#'", "'+RSUB'", "'BASE'", "'RESW'", 
		"'RESB'", "'WORD'", "'BYTE'", "'START'", "'END'", null, null, null, null, 
		null, "'SVC'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "BASE", "RESW", "RESB", "WORD", 
		"BYTE", "START", "END", "COMMA", "INSTR1", "INSTR2_r1r2", "INSTR2_r1", 
		"INSTR2_r1n", "INSTR2_n", "INSTR3", "INSTR4", "FINL", "REG", "NUMDEC", 
		"TEXT", "NUMHEX_sh", "NUMHEX", "CONSTHEX", "CONSTCAD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sicxeGram.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public sicxeGramParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public StartContext start() {
			return GetRuleContext<StartContext>(0);
		}
		public PropositionsContext propositions() {
			return GetRuleContext<PropositionsContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; start();
			State = 59; propositions();
			State = 60; end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode START() { return GetToken(sicxeGramParser.START, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public LineBreakContext lineBreak() {
			return GetRuleContext<LineBreakContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; label();
			State = 63; Match(START);
			State = 64; num();
			State = 65; lineBreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(sicxeGramParser.END, 0); }
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public LineBreakContext lineBreak() {
			return GetRuleContext<LineBreakContext>(0);
		}
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_end);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(END);
			State = 69;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TEXT) {
				{
				State = 68; label();
				}
			}

			State = 72;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FINL) {
				{
				State = 71; lineBreak();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropositionsContext : ParserRuleContext {
		public PropositionContext[] proposition() {
			return GetRuleContexts<PropositionContext>();
		}
		public PropositionContext proposition(int i) {
			return GetRuleContext<PropositionContext>(i);
		}
		public LineBreakContext[] lineBreak() {
			return GetRuleContexts<LineBreakContext>();
		}
		public LineBreakContext lineBreak(int i) {
			return GetRuleContext<LineBreakContext>(i);
		}
		public PropositionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propositions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterPropositions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitPropositions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropositions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropositionsContext propositions() {
		PropositionsContext _localctx = new PropositionsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_propositions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__5) | (1L << BASE) | (1L << RESW) | (1L << RESB) | (1L << WORD) | (1L << BYTE) | (1L << INSTR1) | (1L << INSTR2_r1r2) | (1L << INSTR2_r1) | (1L << INSTR2_r1n) | (1L << INSTR2_n) | (1L << INSTR3) | (1L << INSTR4) | (1L << TEXT))) != 0)) {
				{
				{
				State = 74; proposition();
				State = 75; lineBreak();
				}
				}
				State = 81;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropositionContext : ParserRuleContext {
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public PropositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterProposition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitProposition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropositionContext proposition() {
		PropositionContext _localctx = new PropositionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_proposition);
		try {
			State = 84;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; instruction();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; directive();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineBreakContext : ParserRuleContext {
		public ITerminalNode FINL() { return GetToken(sicxeGramParser.FINL, 0); }
		public LineBreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineBreak; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterLineBreak(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitLineBreak(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineBreakContext lineBreak() {
		LineBreakContext _localctx = new LineBreakContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_lineBreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public DirectiveTypeContext directiveType() {
			return GetRuleContext<DirectiveTypeContext>(0);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_directive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TEXT) {
				{
				State = 88; label();
				}
			}

			State = 91; directiveType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveTypeContext : ParserRuleContext {
		public ByteContext @byte() {
			return GetRuleContext<ByteContext>(0);
		}
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public ResbContext resb() {
			return GetRuleContext<ResbContext>(0);
		}
		public ReswContext resw() {
			return GetRuleContext<ReswContext>(0);
		}
		public BaseContext @base() {
			return GetRuleContext<BaseContext>(0);
		}
		public DirectiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterDirectiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitDirectiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveTypeContext directiveType() {
		DirectiveTypeContext _localctx = new DirectiveTypeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_directiveType);
		try {
			State = 98;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BYTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; @byte();
				}
				break;
			case WORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; word();
				}
				break;
			case RESB:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; resb();
				}
				break;
			case RESW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96; resw();
				}
				break;
			case BASE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 97; @base();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteContext : ParserRuleContext {
		public ITerminalNode BYTE() { return GetToken(sicxeGramParser.BYTE, 0); }
		public ConstContext @const() {
			return GetRuleContext<ConstContext>(0);
		}
		public ByteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byte; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterByte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitByte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ByteContext @byte() {
		ByteContext _localctx = new ByteContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_byte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(BYTE);
			State = 101; @const();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(sicxeGramParser.WORD, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public WordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_word; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordContext word() {
		WordContext _localctx = new WordContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_word);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(WORD);
			State = 104; num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResbContext : ParserRuleContext {
		public ITerminalNode RESB() { return GetToken(sicxeGramParser.RESB, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ResbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resb; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterResb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitResb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResbContext resb() {
		ResbContext _localctx = new ResbContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_resb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(RESB);
			State = 107; num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReswContext : ParserRuleContext {
		public ITerminalNode RESW() { return GetToken(sicxeGramParser.RESW, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ReswContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resw; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterResw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitResw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReswContext resw() {
		ReswContext _localctx = new ReswContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_resw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(RESW);
			State = 110; num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseContext : ParserRuleContext {
		public ITerminalNode BASE() { return GetToken(sicxeGramParser.BASE, 0); }
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public BaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseContext @base() {
		BaseContext _localctx = new BaseContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(BASE);
			State = 113; label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public FormatContext format() {
			return GetRuleContext<FormatContext>(0);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TEXT) {
				{
				State = 115; label();
				}
			}

			State = 118; format();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatContext : ParserRuleContext {
		public F1Context f1() {
			return GetRuleContext<F1Context>(0);
		}
		public F2Context f2() {
			return GetRuleContext<F2Context>(0);
		}
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public F4Context f4() {
			return GetRuleContext<F4Context>(0);
		}
		public FormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterFormat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitFormat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatContext format() {
		FormatContext _localctx = new FormatContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_format);
		try {
			State = 124;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INSTR1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; f1();
				}
				break;
			case INSTR2_r1r2:
			case INSTR2_r1:
			case INSTR2_r1n:
			case INSTR2_n:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; f2();
				}
				break;
			case T__2:
			case INSTR3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 122; f3();
				}
				break;
			case T__5:
			case INSTR4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 123; f4();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F1Context : ParserRuleContext {
		public ITerminalNode INSTR1() { return GetToken(sicxeGramParser.INSTR1, 0); }
		public F1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterF1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitF1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F1Context f1() {
		F1Context _localctx = new F1Context(_ctx, State);
		EnterRule(_localctx, 30, RULE_f1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(INSTR1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F2Context : ParserRuleContext {
		public ITerminalNode INSTR2_r1r2() { return GetToken(sicxeGramParser.INSTR2_r1r2, 0); }
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(sicxeGramParser.COMMA, 0); }
		public ITerminalNode INSTR2_r1() { return GetToken(sicxeGramParser.INSTR2_r1, 0); }
		public ITerminalNode INSTR2_r1n() { return GetToken(sicxeGramParser.INSTR2_r1n, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ITerminalNode INSTR2_n() { return GetToken(sicxeGramParser.INSTR2_n, 0); }
		public F2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterF2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitF2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F2Context f2() {
		F2Context _localctx = new F2Context(_ctx, State);
		EnterRule(_localctx, 32, RULE_f2);
		int _la;
		try {
			State = 146;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; Match(INSTR2_r1r2);
				{
				State = 129; reg();
				State = 130; Match(COMMA);
				State = 131; reg();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; Match(INSTR2_r1r2);
				{
				State = 134; reg();
				State = 135;
				_la = _input.La(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 137; Match(INSTR2_r1);
				{
				State = 138; reg();
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 139; Match(INSTR2_r1n);
				{
				State = 140; reg();
				State = 141; Match(COMMA);
				State = 142; num();
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 144; Match(INSTR2_n);
				{
				State = 145; num();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F3Context : ParserRuleContext {
		public Simple3Context simple3() {
			return GetRuleContext<Simple3Context>(0);
		}
		public Indirect3Context indirect3() {
			return GetRuleContext<Indirect3Context>(0);
		}
		public Immediate3Context immediate3() {
			return GetRuleContext<Immediate3Context>(0);
		}
		public F3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterF3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitF3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F3Context f3() {
		F3Context _localctx = new F3Context(_ctx, State);
		EnterRule(_localctx, 34, RULE_f3);
		try {
			State = 151;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148; simple3();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; indirect3();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150; immediate3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F4Context : ParserRuleContext {
		public Simple4Context simple4() {
			return GetRuleContext<Simple4Context>(0);
		}
		public Indirect4Context indirect4() {
			return GetRuleContext<Indirect4Context>(0);
		}
		public Immediate4Context immediate4() {
			return GetRuleContext<Immediate4Context>(0);
		}
		public F4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f4; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterF4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitF4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F4Context f4() {
		F4Context _localctx = new F4Context(_ctx, State);
		EnterRule(_localctx, 36, RULE_f4);
		try {
			State = 156;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153; simple4();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; indirect4();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 155; immediate4();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple3Context : ParserRuleContext {
		public ITerminalNode INSTR3() { return GetToken(sicxeGramParser.INSTR3, 0); }
		public ITerminalNode TEXT() { return GetToken(sicxeGramParser.TEXT, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public Simple3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterSimple3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitSimple3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple3Context simple3() {
		Simple3Context _localctx = new Simple3Context(_ctx, State);
		EnterRule(_localctx, 38, RULE_simple3);
		int _la;
		try {
			State = 167;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INSTR3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; Match(INSTR3);
				State = 161;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case TEXT:
					{
					State = 159; Match(TEXT);
					}
					break;
				case NUMDEC:
				case NUMHEX:
					{
					State = 160; num();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 164;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__0 || _la==T__1) {
					{
					State = 163;
					_la = _input.La(1);
					if ( !(_la==T__0 || _la==T__1) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirect3Context : ParserRuleContext {
		public ITerminalNode INSTR3() { return GetToken(sicxeGramParser.INSTR3, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ITerminalNode TEXT() { return GetToken(sicxeGramParser.TEXT, 0); }
		public Indirect3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirect3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterIndirect3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitIndirect3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirect3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indirect3Context indirect3() {
		Indirect3Context _localctx = new Indirect3Context(_ctx, State);
		EnterRule(_localctx, 40, RULE_indirect3);
		try {
			State = 175;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169; Match(INSTR3);
				State = 170; Match(T__3);
				State = 171; num();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; Match(INSTR3);
				State = 173; Match(T__3);
				State = 174; Match(TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Immediate3Context : ParserRuleContext {
		public ITerminalNode INSTR3() { return GetToken(sicxeGramParser.INSTR3, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ITerminalNode TEXT() { return GetToken(sicxeGramParser.TEXT, 0); }
		public Immediate3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immediate3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterImmediate3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitImmediate3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmediate3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Immediate3Context immediate3() {
		Immediate3Context _localctx = new Immediate3Context(_ctx, State);
		EnterRule(_localctx, 42, RULE_immediate3);
		try {
			State = 183;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177; Match(INSTR3);
				State = 178; Match(T__4);
				State = 179; num();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; Match(INSTR3);
				State = 181; Match(T__4);
				State = 182; Match(TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple4Context : ParserRuleContext {
		public ITerminalNode INSTR4() { return GetToken(sicxeGramParser.INSTR4, 0); }
		public ITerminalNode TEXT() { return GetToken(sicxeGramParser.TEXT, 0); }
		public Simple4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple4; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterSimple4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitSimple4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple4Context simple4() {
		Simple4Context _localctx = new Simple4Context(_ctx, State);
		EnterRule(_localctx, 44, RULE_simple4);
		int _la;
		try {
			State = 191;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INSTR4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185; Match(INSTR4);
				State = 186; Match(TEXT);
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__0 || _la==T__1) {
					{
					State = 187;
					_la = _input.La(1);
					if ( !(_la==T__0 || _la==T__1) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190; Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirect4Context : ParserRuleContext {
		public ITerminalNode INSTR4() { return GetToken(sicxeGramParser.INSTR4, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ITerminalNode TEXT() { return GetToken(sicxeGramParser.TEXT, 0); }
		public Indirect4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirect4; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterIndirect4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitIndirect4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirect4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indirect4Context indirect4() {
		Indirect4Context _localctx = new Indirect4Context(_ctx, State);
		EnterRule(_localctx, 46, RULE_indirect4);
		try {
			State = 199;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; Match(INSTR4);
				State = 194; Match(T__3);
				State = 195; num();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196; Match(INSTR4);
				State = 197; Match(T__3);
				State = 198; Match(TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Immediate4Context : ParserRuleContext {
		public ITerminalNode INSTR4() { return GetToken(sicxeGramParser.INSTR4, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ITerminalNode TEXT() { return GetToken(sicxeGramParser.TEXT, 0); }
		public Immediate4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immediate4; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterImmediate4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitImmediate4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmediate4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Immediate4Context immediate4() {
		Immediate4Context _localctx = new Immediate4Context(_ctx, State);
		EnterRule(_localctx, 48, RULE_immediate4);
		try {
			State = 207;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; Match(INSTR4);
				State = 202; Match(T__4);
				State = 203; num();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204; Match(INSTR4);
				State = 205; Match(T__4);
				State = 206; Match(TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public ITerminalNode NUMDEC() { return GetToken(sicxeGramParser.NUMDEC, 0); }
		public ITerminalNode NUMHEX() { return GetToken(sicxeGramParser.NUMHEX, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_num);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			_la = _input.La(1);
			if ( !(_la==NUMDEC || _la==NUMHEX) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(sicxeGramParser.TEXT, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstContext : ParserRuleContext {
		public ITerminalNode CONSTHEX() { return GetToken(sicxeGramParser.CONSTHEX, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(sicxeGramParser.CONSTCAD, 0); }
		public ConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstContext @const() {
		ConstContext _localctx = new ConstContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_const);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = _input.La(1);
			if ( !(_la==CONSTHEX || _la==CONSTCAD) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegContext : ParserRuleContext {
		public ITerminalNode REG() { return GetToken(sicxeGramParser.REG, 0); }
		public RegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.EnterReg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsicxeGramListener typedListener = listener as IsicxeGramListener;
			if (typedListener != null) typedListener.ExitReg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsicxeGramVisitor<TResult> typedVisitor = visitor as IsicxeGramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegContext reg() {
		RegContext _localctx = new RegContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_reg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(REG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1F\xDC\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4H\n\x4\x3\x4\x5\x4K\n"+
		"\x4\x3\x5\x3\x5\x3\x5\a\x5P\n\x5\f\x5\xE\x5S\v\x5\x3\x6\x3\x6\x5\x6W\n"+
		"\x6\x3\a\x3\a\x3\b\x5\b\\\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t"+
		"\x65\n\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3"+
		"\xE\x3\xE\x3\xE\x3\xF\x5\xFw\n\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x5\x10\x7F\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x5\x12\x95\n\x12\x3\x13\x3\x13\x3\x13\x5\x13\x9A"+
		"\n\x13\x3\x14\x3\x14\x3\x14\x5\x14\x9F\n\x14\x3\x15\x3\x15\x3\x15\x5\x15"+
		"\xA4\n\x15\x3\x15\x5\x15\xA7\n\x15\x3\x15\x5\x15\xAA\n\x15\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\xB2\n\x16\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x5\x17\xBA\n\x17\x3\x18\x3\x18\x3\x18\x5\x18\xBF\n"+
		"\x18\x3\x18\x5\x18\xC2\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x5\x19\xCA\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\xD2"+
		"\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E"+
		"\x2\x2\x2\x1F\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2"+
		"\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2\x2\x5\x3\x2\x3\x4\x4\x2\x1A\x1A"+
		"\x1D\x1D\x3\x2\x1E\x1F\xDC\x2<\x3\x2\x2\x2\x4@\x3\x2\x2\x2\x6\x45\x3\x2"+
		"\x2\x2\bQ\x3\x2\x2\x2\nV\x3\x2\x2\x2\fX\x3\x2\x2\x2\xE[\x3\x2\x2\x2\x10"+
		"\x64\x3\x2\x2\x2\x12\x66\x3\x2\x2\x2\x14i\x3\x2\x2\x2\x16l\x3\x2\x2\x2"+
		"\x18o\x3\x2\x2\x2\x1Ar\x3\x2\x2\x2\x1Cv\x3\x2\x2\x2\x1E~\x3\x2\x2\x2 "+
		"\x80\x3\x2\x2\x2\"\x94\x3\x2\x2\x2$\x99\x3\x2\x2\x2&\x9E\x3\x2\x2\x2("+
		"\xA9\x3\x2\x2\x2*\xB1\x3\x2\x2\x2,\xB9\x3\x2\x2\x2.\xC1\x3\x2\x2\x2\x30"+
		"\xC9\x3\x2\x2\x2\x32\xD1\x3\x2\x2\x2\x34\xD3\x3\x2\x2\x2\x36\xD5\x3\x2"+
		"\x2\x2\x38\xD7\x3\x2\x2\x2:\xD9\x3\x2\x2\x2<=\x5\x4\x3\x2=>\x5\b\x5\x2"+
		">?\x5\x6\x4\x2?\x3\x3\x2\x2\x2@\x41\x5\x36\x1C\x2\x41\x42\a\xE\x2\x2\x42"+
		"\x43\x5\x34\x1B\x2\x43\x44\x5\f\a\x2\x44\x5\x3\x2\x2\x2\x45G\a\xF\x2\x2"+
		"\x46H\x5\x36\x1C\x2G\x46\x3\x2\x2\x2GH\x3\x2\x2\x2HJ\x3\x2\x2\x2IK\x5"+
		"\f\a\x2JI\x3\x2\x2\x2JK\x3\x2\x2\x2K\a\x3\x2\x2\x2LM\x5\n\x6\x2MN\x5\f"+
		"\a\x2NP\x3\x2\x2\x2OL\x3\x2\x2\x2PS\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2"+
		"\x2\x2R\t\x3\x2\x2\x2SQ\x3\x2\x2\x2TW\x5\x1C\xF\x2UW\x5\xE\b\x2VT\x3\x2"+
		"\x2\x2VU\x3\x2\x2\x2W\v\x3\x2\x2\x2XY\a\x18\x2\x2Y\r\x3\x2\x2\x2Z\\\x5"+
		"\x36\x1C\x2[Z\x3\x2\x2\x2[\\\x3\x2\x2\x2\\]\x3\x2\x2\x2]^\x5\x10\t\x2"+
		"^\xF\x3\x2\x2\x2_\x65\x5\x12\n\x2`\x65\x5\x14\v\x2\x61\x65\x5\x16\f\x2"+
		"\x62\x65\x5\x18\r\x2\x63\x65\x5\x1A\xE\x2\x64_\x3\x2\x2\x2\x64`\x3\x2"+
		"\x2\x2\x64\x61\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x63\x3\x2\x2\x2\x65"+
		"\x11\x3\x2\x2\x2\x66g\a\r\x2\x2gh\x5\x38\x1D\x2h\x13\x3\x2\x2\x2ij\a\f"+
		"\x2\x2jk\x5\x34\x1B\x2k\x15\x3\x2\x2\x2lm\a\v\x2\x2mn\x5\x34\x1B\x2n\x17"+
		"\x3\x2\x2\x2op\a\n\x2\x2pq\x5\x34\x1B\x2q\x19\x3\x2\x2\x2rs\a\t\x2\x2"+
		"st\x5\x36\x1C\x2t\x1B\x3\x2\x2\x2uw\x5\x36\x1C\x2vu\x3\x2\x2\x2vw\x3\x2"+
		"\x2\x2wx\x3\x2\x2\x2xy\x5\x1E\x10\x2y\x1D\x3\x2\x2\x2z\x7F\x5 \x11\x2"+
		"{\x7F\x5\"\x12\x2|\x7F\x5$\x13\x2}\x7F\x5&\x14\x2~z\x3\x2\x2\x2~{\x3\x2"+
		"\x2\x2~|\x3\x2\x2\x2~}\x3\x2\x2\x2\x7F\x1F\x3\x2\x2\x2\x80\x81\a\x11\x2"+
		"\x2\x81!\x3\x2\x2\x2\x82\x83\a\x12\x2\x2\x83\x84\x5:\x1E\x2\x84\x85\a"+
		"\x10\x2\x2\x85\x86\x5:\x1E\x2\x86\x95\x3\x2\x2\x2\x87\x88\a\x12\x2\x2"+
		"\x88\x89\x5:\x1E\x2\x89\x8A\t\x2\x2\x2\x8A\x95\x3\x2\x2\x2\x8B\x8C\a\x13"+
		"\x2\x2\x8C\x95\x5:\x1E\x2\x8D\x8E\a\x14\x2\x2\x8E\x8F\x5:\x1E\x2\x8F\x90"+
		"\a\x10\x2\x2\x90\x91\x5\x34\x1B\x2\x91\x95\x3\x2\x2\x2\x92\x93\a\x15\x2"+
		"\x2\x93\x95\x5\x34\x1B\x2\x94\x82\x3\x2\x2\x2\x94\x87\x3\x2\x2\x2\x94"+
		"\x8B\x3\x2\x2\x2\x94\x8D\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x95#\x3\x2\x2"+
		"\x2\x96\x9A\x5(\x15\x2\x97\x9A\x5*\x16\x2\x98\x9A\x5,\x17\x2\x99\x96\x3"+
		"\x2\x2\x2\x99\x97\x3\x2\x2\x2\x99\x98\x3\x2\x2\x2\x9A%\x3\x2\x2\x2\x9B"+
		"\x9F\x5.\x18\x2\x9C\x9F\x5\x30\x19\x2\x9D\x9F\x5\x32\x1A\x2\x9E\x9B\x3"+
		"\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9D\x3\x2\x2\x2\x9F\'\x3\x2\x2\x2\xA0"+
		"\xA3\a\x16\x2\x2\xA1\xA4\a\x1B\x2\x2\xA2\xA4\x5\x34\x1B\x2\xA3\xA1\x3"+
		"\x2\x2\x2\xA3\xA2\x3\x2\x2\x2\xA4\xA6\x3\x2\x2\x2\xA5\xA7\t\x2\x2\x2\xA6"+
		"\xA5\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xAA\x3\x2\x2\x2\xA8\xAA\a\x5"+
		"\x2\x2\xA9\xA0\x3\x2\x2\x2\xA9\xA8\x3\x2\x2\x2\xAA)\x3\x2\x2\x2\xAB\xAC"+
		"\a\x16\x2\x2\xAC\xAD\a\x6\x2\x2\xAD\xB2\x5\x34\x1B\x2\xAE\xAF\a\x16\x2"+
		"\x2\xAF\xB0\a\x6\x2\x2\xB0\xB2\a\x1B\x2\x2\xB1\xAB\x3\x2\x2\x2\xB1\xAE"+
		"\x3\x2\x2\x2\xB2+\x3\x2\x2\x2\xB3\xB4\a\x16\x2\x2\xB4\xB5\a\a\x2\x2\xB5"+
		"\xBA\x5\x34\x1B\x2\xB6\xB7\a\x16\x2\x2\xB7\xB8\a\a\x2\x2\xB8\xBA\a\x1B"+
		"\x2\x2\xB9\xB3\x3\x2\x2\x2\xB9\xB6\x3\x2\x2\x2\xBA-\x3\x2\x2\x2\xBB\xBC"+
		"\a\x17\x2\x2\xBC\xBE\a\x1B\x2\x2\xBD\xBF\t\x2\x2\x2\xBE\xBD\x3\x2\x2\x2"+
		"\xBE\xBF\x3\x2\x2\x2\xBF\xC2\x3\x2\x2\x2\xC0\xC2\a\b\x2\x2\xC1\xBB\x3"+
		"\x2\x2\x2\xC1\xC0\x3\x2\x2\x2\xC2/\x3\x2\x2\x2\xC3\xC4\a\x17\x2\x2\xC4"+
		"\xC5\a\x6\x2\x2\xC5\xCA\x5\x34\x1B\x2\xC6\xC7\a\x17\x2\x2\xC7\xC8\a\x6"+
		"\x2\x2\xC8\xCA\a\x1B\x2\x2\xC9\xC3\x3\x2\x2\x2\xC9\xC6\x3\x2\x2\x2\xCA"+
		"\x31\x3\x2\x2\x2\xCB\xCC\a\x17\x2\x2\xCC\xCD\a\a\x2\x2\xCD\xD2\x5\x34"+
		"\x1B\x2\xCE\xCF\a\x17\x2\x2\xCF\xD0\a\a\x2\x2\xD0\xD2\a\x1B\x2\x2\xD1"+
		"\xCB\x3\x2\x2\x2\xD1\xCE\x3\x2\x2\x2\xD2\x33\x3\x2\x2\x2\xD3\xD4\t\x3"+
		"\x2\x2\xD4\x35\x3\x2\x2\x2\xD5\xD6\a\x1B\x2\x2\xD6\x37\x3\x2\x2\x2\xD7"+
		"\xD8\t\x4\x2\x2\xD8\x39\x3\x2\x2\x2\xD9\xDA\a\x19\x2\x2\xDA;\x3\x2\x2"+
		"\x2\x16GJQV[\x64v~\x94\x99\x9E\xA3\xA6\xA9\xB1\xB9\xBE\xC1\xC9\xD1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Practica3
